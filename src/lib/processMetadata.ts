import type { Metadata } from 'next';
import { BASE_URL, vercelPreview } from './env';
import resolveUrl from './resolveUrl';

export default async function processMetadata(
  page: Sanity.Page | Sanity.BlogPost
): Promise<Metadata> {
  if (!page.metadata) {
    throw new Error('Page metadata is required');
  }

  const url = resolveUrl(page as Sanity.PageBase);
  const { title, description, ogimage: uploadedOg, noIndex } = page.metadata;
  const autogeneratedOg = `${BASE_URL}/api/og?title=${encodeURIComponent(title)}`;

  return {
    metadataBase: new URL(BASE_URL),
    title,
    description,
    openGraph: {
      type: page._type === 'blog.post' ? 'article' : 'website',
      url,
      title,
      description,
      images: uploadedOg || autogeneratedOg,
      ...(page._type === 'blog.post' && {
        publishedTime: (page as Sanity.BlogPost).publishDate,
      }),
    },
    robots: {
      index: noIndex || vercelPreview ? false : undefined,
    },
    alternates: {
      canonical: url,
      types: {
        'application/rss+xml': '/nyheter/rss.xml',
      },
    },
  };
}
